openapi: 3.0.0
info:
  title: Joka API
  description: API for managing and retrieving information about Joka golf bags and clubs, including hypermedia controls to guide clients.
  version: 1.0.0-beta
servers:
  - url: https://joka-app.com/api/v1

paths:
  /players:
    get:
      summary: Retrieve a list of all players
      tags:
        - Players
      responses:
        '200':
          description: Successfully retrieved the list of players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'

    post:
      summary: Create a new player
      tags:
        - Players
      requestBody:
        description: Data required to create a new player
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerInput'
      responses:
        '201':
          description: Successfully created the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'

  /players/{playerId}:
    get:
      summary: Retrieve details of a specific player
      tags:
        - Players
      parameters:
        - name: playerId
          in: path
          required: true
          description: Unique UUID of the player
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the player details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update a specific player's information
      tags:
        - Players
      parameters:
        - name: playerId
          in: path
          required: true
          description: Unique UUID of the player
          schema:
            type: string
            format: uuid
      requestBody:
        description: Data to update the player
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerInput'
      responses:
        '200':
          description: Successfully updated the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a specific player
      tags:
        - Players
      parameters:
        - name: playerId
          in: path
          required: true
          description: Unique UUID of the player
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successfully deleted the player
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /players/{playerId}/bags:
    get:
      summary: Retrieve all bags of a specific player
      tags:
        - Players
      parameters:
        - name: playerId
          in: path
          required: true
          description: Unique UUID of the player
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the bags of the player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /bags:
    get:
      summary: Retrieve a list of all bags
      tags:
        - Bags
      responses:
        '200':
          description: Successfully retrieved the list of bags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'

    post:
      summary: Create a new bag
      tags:
        - Bags
      requestBody:
        description: Data required to create a new bag
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the bag
                  example: "My New Golf Bag"
                playerId:
                  type: string
                  format: uuid
                  description: UUID of the player who owns the bag
              required:
                - name
                - playerId
      responses:
        '201':
          description: Successfully created the bag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'

  /bags/{bagId}:
    get:
      summary: Retrieve details of a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the bag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update a specific bag's information
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      requestBody:
        description: Data to update the bag
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the bag
                  example: "Updated Golf Bag"
      responses:
        '200':
          description: Successfully updated the bag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successfully deleted the bag
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Replace the list of clubs in a specific bag with a new list of club UUIDs
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      requestBody:
        description: List of up to 14 club UUIDs to replace the current clubs in the bag
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clubIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: List of up to 14 club UUIDs to replace the current clubs in the bag
                  example:
                    - "e2a5f14e-12b4-4a8f-935f-5d69c9493c2f"
                    - "b3c0f2c4-5e88-4e68-9c67-4b11f47f6f2b"
              required:
                - clubIds
      responses:
        '200':
          description: Successfully replaced the list of clubs in the bag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /bags/{bagId}/clubs/{clubId}:
    post:
      summary: Add a club to a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully added the club to the bag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Remove a club from a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successfully removed the club from the bag
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /bags/{bagId}/top-rated-clubs:
    get:
      summary: Retrieve top-rated clubs of a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved top-rated clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /bags/{bagId}/most-played-clubs:
    get:
      summary: Retrieve most played clubs of a specific bag
      tags:
        - Bags
      parameters:
        - name: bagId
          in: path
          required: true
          description: Unique UUID of the bag
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved most played clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /clubs:
    post:
      summary: Create a new club
      tags:
        - Clubs
      requestBody:
        description: Data required to create a new club
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubInput'
      responses:
        '201':
          description: Successfully created the club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'

  /clubs/{clubId}:
    get:
      summary: Retrieve information of a specific club
      tags:
        - Clubs
      parameters:
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved the club information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update a specific club's type, loft, and label
      tags:
        - Clubs
      parameters:
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      requestBody:
        description: Data to update the club
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubInput'
      responses:
        '200':
          description: Successfully updated the club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete a specific club
      tags:
        - Clubs
      parameters:
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successfully deleted the club
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /clubs/{clubId}/shots:
    post:
      summary: Record a shot (feeling) for a specific club and return updated club information
      tags:
        - Clubs
      parameters:
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      requestBody:
        description: Feeling rating for the shot (1 to 5)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feeling:
                  type: integer
                  description: Feeling rating for the shot, must be between 1 and 5
                  example: 4
              required:
                - feeling
      responses:
        '200':
          description: Successfully recorded the shot and updated the club information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /clubs/{clubId}/clear:
    post:
      summary: Reset a club's feeling and shots to zero
      tags:
        - Clubs
      parameters:
        - name: clubId
          in: path
          required: true
          description: Unique UUID of the club
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully reset the club's feeling and shots to zero
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique UUID of the player
        firstName:
          type: string
          description: First name of the player
        lastName:
          type: string
          description: Last name of the player
        email:
          type: string
          format: email
          description: Email of the player
        links:
          type: object
          properties:
            self:
              type: string
              description: Link to the player resource
              example: "/players/{id}"
            bags:
              type: string
              description: Link to the player's bags
              example: "/players/{id}/bags"

    PlayerInput:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the player
        lastName:
          type: string
          description: Last name of the player
        email:
          type: string
          format: email
          description: Email of the player
      required:
        - firstName
        - lastName
        - email

    Club:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique UUID of the club
        type:
          type: string
          description: Type of the club
          enum:
            - Driver
            - Wood
            - Iron
            - Hybrid
            - Wedge
            - Putter
        loft:
          type: string
          description: Loft of the club
        label:
          type: string
          description: Label of the club
        statistics:
          type: object
          properties:
            feeling:
              type: number
              format: float
              description: Average feeling rating (from 1 to 5), initialized to 0
              example: 4.7
            shots:
              type: integer
              description: Number of times the club has been used, initialized to 0
              example: 134
        links:
          type: object
          properties:
            self:
              type: string
              description: Link to the club resource
              example: "/clubs/{id}"
            update:
              type: string
              description: Link to update the club
              example: "/clubs/{id}"
            delete:
              type: string
              description: Link to delete the club
              example: "/clubs/{id}"
            recordShot:
              type: string
              description: Link to record a shot for the club
              example: "/clubs/{id}/shots"
            clear:
              example: "/clubs/{id}/clear"
              type: string
              description: Link to reset the club's feeling and shots to zero

    ClubInput:
      type: object
      properties:
        type:
          type: string
          description: Type of the club
          enum:
            - Driver
            - Wood
            - Iron
            - Hybrid
            - Wedge
            - Putter
        loft:
          type: string
          description: Loft of the club
        label:
          type: string
          description: Label of the club
      required:
        - type
        - loft
        - label

    Bag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique UUID of the bag
        name:
          type: string
          description: Name of the bag
        clubs:
          type: array
          items:
            $ref: '#/components/schemas/Club'
        playerId:
          type: string
          format: uuid
          description: UUID of the player who owns the bag
        links:
          type: object
          properties:
            self:
              type: string
              description: Link to the bag resource
              example: "/bags/{id}"
            update:
              type: string
              description: Link to update the bag
              example: "/bags/{id}"
            delete:
              type: string
              description: Link to delete the bag
              example: "/bags/{id}"
            clubs:
              type: string
              description: Link to retrieve clubs in the bag
              example: "/bags/{id}/clubs"
            topRatedClubs:
              type: string
              description: Link to retrieve top-rated clubs in the bag
              example: "/bags/{id}/top-rated-clubs"
            mostPlayedClubs:
              type: string
              description: Link to retrieve most played clubs in the bag
              example: "/bags/{id}/most-played-clubs"

  responses:
    BadRequest:
      description: Bad request due to invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request parameters"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"
